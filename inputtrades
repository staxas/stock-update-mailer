#!/bin/bash

# Stock-Update-Mailer
# InputTrades v0.1
# By Edwin Rietmeijer, 2020

# Function to get first index of an item in an array
getPos() {
  local toFind=${1}
  shift
  local i=0;
  for v in ${@}
  do
    if [[ $v == $toFind ]]; then
      echo ${i};
      return;
    fi;
  i=$((i + 1));
  done;
  echo -1;
}

d=$(date +%Y.%m.%d)

# Project working directory
fileroot="$( cd "$(dirname "$0")" || exit >/dev/null 2>&1 ; pwd -P )"

# Working files
stock_names_file="${fileroot}/data/naming/names"
owned_stock_file="${fileroot}/data/user_data/owned"
files=$(find "${fileroot}"/data/rates/*)

# Prepare arrays
filenames=()
stocks=()
stockNames=()
stockOrder=()
for fname in ${files}
do
  filenames+=("${fname}")
  stocks+=($(basename "${fname}"))
  stockNames+=("")
  stockOrder+=("")
done

# Get stock names
i=0
if [[ -f ${stock_names_file} ]]; then
  while IFS="," read -r stk order name
  do
    pos=$(getPos ${stk} ${stocks[@]})
    if [[ $pos != "-1" ]]; then
      stockNames[${pos}]=${name}
      stockOrder[${order}]=${pos}
      i=$((i+1))
    fi
  done < "${stock_names_file}"
else
  echo "${stock_names_file} does not exist"
fi

while [[ ${allInputCorrect} != "1" ]]
  do
  # List available stock
  i=1
  for stockIndex in ${stockOrder[@]}
  do
    echo ${i} ${stockNames[${stockIndex}]}
    i=$((i+1))
  done

  checkInput=0;
  while [[ ${checkInput} = "0" ]]
  do
    echo "Which stock do you want to trade?"
    read -p "(1 - ${#stockNames[@]}, q to quit): " stockToAdd
    if [[ ${stockToAdd} == "q" ]]; then
      exit 0;
    fi
    if [[ ${stockToAdd} -lt 1 ]] || [[ ${stockToAdd} -gt ${#stockNames[@]} ]]; then
      echo "Not a valid stock"
    else
      checkInput=1
    fi
  done

  stockToAdd=$((stockToAdd-1))

  while  [[ ${rateOnDate} == "" ]];
  do
    tryCurrDate=0
    errCode=1
    echo "For which date do you want to trade stock? e.g. '2020.09.31'"
    read -p "(leave blank for today, q to quit): " dateToAdd
    while [[ ${errCode} != "0" ]]
    do
      if [[ ${dateToAdd} == "q" ]]; then
        exit 0;
      fi
      if [[ ${dateToAdd} == "" ]]; then
        dateToAdd=$(date +%Y.%m.%d)
        tryCurrDate=1
      fi
      # Check if input date is correct
      date -d"${dateToAdd//./}" '+%A %B %d %Y' > /dev/null 2>&1
      errCode=$?
      if [[ ${errCode} != '0' ]]; then
        echo "Invalid date"
      fi
    done
    displayDate=$(date -d"${dateToAdd//./}" '+%A %B %d %Y')
    if [[ -f "${filenames[${stockOrder[${stockToAdd}]}]}" ]]; then
      while IFS="," read -r d rate
      do
        if [[ ${d} == ${dateToAdd} ]]; then
          rateOnDate=${rate}
        fi
      done < "${filenames[${stockOrder[${stockToAdd}]}]}"
    else
      echo "No rate data found for this stock"
      exit 1;
    fi
    if [[ ${rateOnDate} == "" ]]; then
      echo "No rate data for that date"
      if [[ ${tryCurrDate} == "1" ]]; then
        echo "You do not have today's stock data, do you want to run 'getrates'?"
        read -p "(y/n, q to quit): " runGetRates
        if [[ ${runGetRates} == "q" ]]; then
          exit 0;
        fi
        if [[ ${runGetRates} == "y" ]]; then
          $(/bin/bash "${fileroot}/getrates")
        fi
      fi
    fi
  done
  totalOwned=0
  isCurrentDate=0
  if [[ -f "${owned_stock_file}" ]]; then
    while IFS="," read -r d stock amt
    do
      if [[ ${isCurrentDate} == 0 ]]; then
        if [[ ${stock} == ${stocks[${stockOrder[${stockToAdd}]}]} ]]; then
          totalOwned=$(awk '{print $1+$2}' <<< "${totalOwned} ${amt}")
          if [[ ${d} == ${dateToAdd} ]]; then
            isCurrentDate=1
          fi
        fi
      fi
    done < "${owned_stock_file}"
  fi
  if [[ ${rateOnDate} == $(date +%Y.%m.%d) ]]; then
    isWas="is"
  else
    isWas="was"
  fi
  echo "The rate on ${displayDate} ${isWas} ${rateOnDate} and you owned ${totalOwned} units of the selected stock on that day"
  echo "How many units did you buy or sell on that date? (negative numbers to sell)"
  validUnitInput=0
  while [[ ${validUnitInput} != 1 ]]
  do
    validUnitInput=1
    read -p "(a to sell all, q to quit): " unitsToTrade
    maximumToSell=$(awk '{print $1*-1}' <<< "${totalOwned}")

    if [[ ${unitsToTrade} == "q" ]]; then
      exit 0;
    fi
    if [[ ${unitsToTrade} == "a" ]]; then
      unitsToTrade=${maximumToSell}
    fi

    unitsToTrade=${unitsToTrade/,/.}
    regex='^[+-]?[0-9]+([.][0-9]+)?$'
    if ! [[ ${unitsToTrade} =~ ${regex} ]] ; then
       echo "Not a number"
       validUnitInput=0
    fi

    enoughToTrade=$(awk '{if ($1 >= $2) print 1}' <<< "${unitsToTrade} ${maximumToSell}")
    if [[ $enoughToTrade != "1" ]]; then
      echo "Not enough units for trade"
      validUnitInput=0
    fi
  done

  isBuyOrSale==$(awk '{if ($1 >= 0) print 1}' <<< "${unitsToTrade}")
  if [[ ${isBuyOrSale} == "1" ]]; then
    buyOrSell="purchase"
  else
    buyOrSell="sale"
  fi
  tradeValue=$(awk '{print $1*$2}' <<< "${unitsToTrade} ${rateOnDate}")
  echo
  echo "You have made a total ${buyOrSell} of ${unitsToTrade} units of ${stockNames[${stockOrder[${stockToAdd}]}]} worth ${tradeValue} on ${displayDate}" | fold -s
  echo "Is that correct?"
  read -p "(y/n, q to quit): " isCorrect
  if [[ ${isCorrect} == "q" ]]; then
    exit 0;
  fi
  if [[ ${isCorrect} == "y" ]]; then
    allInputCorrect="1"
  fi
done

lineToAdd="${dateToAdd},${stocks[${stockOrder[${stockToAdd}]}]},${unitsToTrade}"
#echo ${lineToAdd} >> "${owned_stock_file}"
echo ${lineToAdd}
echo "Transaction added"

#!/bin/bash

# Function to get first index of an item in an array
getPos() {
  local toFind=${1}
  shift
  local i=0;
  for v in ${@}
  do
    if [[ $v == $toFind ]]; then
      echo ${i};
      return;
    fi;
  i=$((i + 1));
  done;
  echo -1;
}

d=$(date +%Y.%m.%d)

# Project working directory
fileroot="$( cd "$(dirname "$0")" || exit >/dev/null 2>&1 ; pwd -P )"

# Prepare arrays
files=$(find "${fileroot}"/data/rates/*)
filenames=()
stocks=()
stockNames=()
stockOrder=()
for fname in ${files}
do
  filenames+=("${fname}")
  stocks+=($(basename "${fname}"))
  stockNames+=("")
  stockOrder+=("")
done

# Get stock names
stock_names_file="${fileroot}/data/naming/names"
i=0
if [[ -f ${stock_names_file} ]]; then
  while IFS="," read -r stk order name
  do
    pos=$(getPos ${stk} ${stocks[@]})
    if [[ $pos != "-1" ]]; then
      stockNames[${pos}]=${name}
      stockOrder[${order}]=${pos}
      i=$((i+1))
    fi
  done < "${stock_names_file}"
fi

i=1
for stockIndex in ${stockOrder[@]}
do
  echo ${i} ${stockNames[${stockIndex}]}
  i=$((i+1))
done

checkInput=0;
while [[ ${checkInput} = "0" ]]
do
  echo "Which stock do you want to add? 1 - ${#stockNames[@]}"
  read -p "(q to quit): " stockToAdd
  if [[ ${stockToAdd} == "q" ]]; then
    exit 0;
  fi
  if [[ ${stockToAdd} -lt 1 ]] || [[ ${stockToAdd} -gt ${#stockNames[@]} ]]; then
    echo "Not a valid stock"
  else
    checkInput=1
  fi
done

stockToAdd=$((stockToAdd-1))

errCode=1
while [[ ${errCode} != "0" ]]
do
  echo "For which date do you want to add stock? e.g. '2020.09.31'"
  read -p "(leave blank for today, q to quit): " dateToAdd
  if [[ ${dateToAdd} == "q" ]]; then
    exit 0;
  fi
  if [[ ${dateToAdd} == "" ]]; then
    dateToAdd=$(date +%Y.%m.%d)
  fi
  date -d"${dateToAdd//./}" '+%A %B %d %Y' > /dev/null 2>&1
  errCode=$?
  if [[ ${errCode} != '0' ]]; then
    echo "Invalid date"
  fi
done
displayDate=$(date -d"${dateToAdd//./}" '+%A %B %d %Y')
if [[ -f "${filenames[${stockOrder[${stockToAdd}]}]}" ]]; then
  while IFS="," read -r d rate
  do
    if [[ ${d} == ${dateToAdd} ]]; then
      rateOnDate=${rate}
    fi
  done < "${filenames[${stockOrder[${stockToAdd}]}]}"
fi
if [[ ${rateOnDate} == "" ]]; then
  echo "No rate data for that date"
  exit 0
fi

owned_stock_file="${fileroot}/data/user_data/owned"
totalOwned=0
isCurrentDate=0
if [[ -f "${owned_stock_file}" ]]; then
  while IFS="," read -r d stock amt
  do
    if [[ ${isCurrentDate} == 0 ]]; then
      if [[ ${stock} == ${stocks[${stockOrder[${stockToAdd}]}]} ]]; then
        totalOwned=$(awk '{print $1+$2}' <<< "${totalOwned} ${amt}")
        if [[ ${d} == ${dateToAdd} ]]; then
          isCurrentDate=1
        fi
      fi
    fi
  done < "${owned_stock_file}"
fi

echo "The rate on" ${displayDate} "was" ${rateOnDate} "and you owned" ${totalOwned} "units of the selected stock on that day"
echo "How many units did you buy or sell on that date? (negative numbers to sell)"
read -p "(a to sell all, q to quit): " unitsToTrade
if [[ ${unitsToTrade} == "q" ]]; then
  exit 0;
fi
if [[ ${unitsToTrade} == "a" ]]; then
  unitsToTrade=${totalOwned}
fi
unitsToTrade=${unitsToTrade/,/.}
maximumToSell=$(awk '{print $1*-1}' <<< "${totalOwned}")

enoughToTrade=$(awk '{if ($1 >= $2) print 1}' <<< "${unitsToTrade} ${maximumToSell}")
if [[ $enoughToTrade != "1" ]]; then
  echo "Not enough units for trade"
  exit 0
fi
echo
echo "You have made a total trade of" ${stockNames[${stockOrder[${stockToAdd}]}]} "worth "$(awk '{print $1*$2}' <<< "${unitsToTrade} ${rateOnDate}") on ${displayDate}
echo "Is that correct?"
read -p "(y/n, q to quit): " isCorrect
if [[ ${isCorrect} == "q" ]] || [[ ${isCorrect} != "y" ]]; then
  exit 0;
fi

lineToAdd="${dateToAdd},${stocks[${stockOrder[${stockToAdd}]}]},${unitsToTrade}"
owned_stock_file="${fileroot}/data/user_data/owned"

echo ${lineToAdd} >> ${owned_stock_file}
echo "Transaction added"

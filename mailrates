#!/bin/bash

# Stock-Update-Mailer
# MailRates v0.1
# By Edwin Rietmeijer, 2020

if [[ ${1} == "" ]]; then
  echo "Usage: ${0} <email-addr> [-c <symbol>] [-d <symbol>] [-e <email-addr>] [-s <subject>] [-l <on/off>]"
  echo ""
  echo "Currency symbol (-c) is blank by default"
  echo "Decimal separator symbol (-d) is ',' by default"
  echo "Sender email address (-e) is <email-address> by default"
  echo "Email subject (-s) is 'Stock update' by default"
  echo "Logging (-l) is off by default"
  exit 0
fi

# Email address
email_address=${1}
shift
sender_address=${email_address}
email_subject="Stock update"

while getopts ":l:c:d:e:s:" opt; do
   case ${opt} in
     l )
       if [[ $OPTARG == "on" ]] || [[ $OPTARG == "off" ]]; then
         logging=$OPTARG
       else
         echo "Invalid Option: -$OPTARG , logging can only be 'on' or 'off'" 1>&2
         exit 1
       fi
       ;;
     c )
       currency=$OPTARG
       ;;
     d )
       separator=$OPTARG
       ;;
     e )
       sender_address=$OPTARG
       ;;
     s )
       email_subject=$OPTARG
       ;;
    * )
       echo "Invalid Option: -$OPTARG " 1>&2
       exit 1
       ;;
   esac
 done

# Function to get first index of an item in an array
getPos() {
  local toFind=${1}
  shift
  local i=0;
  if [[ ${@} > 0 ]]; then
    for v in ${@}
    do
      if [[ $v == $toFind ]]; then
        echo ${i};
        return;
      fi;
    i=$((i + 1));
    done;
  fi
  echo "-1";
  return;
}

# Function to get all indexes of an item in an array as an array
getPoss() {
  local toFind="${1}"
  shift
  local i=0;
  local p=();
  if [[ ${@} > 0 ]]; then
    for v in ${@}
    do
      if [[ $v == $toFind ]]; then
        p+=(${i});
      fi;
    i=$((i + 1));
    done;
  fi
  echo ${p[@]}
}

# Project working directory
fileroot=$(dirname "${0}")

# Prepare grand total variables
grandTotalPurchase=0
grandTotalCurrValue=0
grandTotalValueDiff=0
grandTotalValueDiffPercent=0

# Prepare arrays
files=$(find "${fileroot}"/data/rates/*)
filenames=()
indices=()
totalAmountTraded=()
totalPurchase=()
nrOfEntries=()
averageRate=()
rateDiffPercent=()
totalPurchaseCurrValue=()
totalPurchaseDiff=()
indiceNames=()
for fname in $files
do
  filenames+=(${fname})
  indices+=($(basename $fname))
  totalAmountTraded+=("0")
  totalPurchase+=("0")
  nrOfEntries+=("0")
  averageRate+=("0")
  rateDiffPercent+=("0")
  totalPurchaseCurrValue+=("0")
  totalPurchaseDiff+=("0")
  indiceNames+=("")
done

indice_names_file="${fileroot}/data/naming/names"

# Get indice names
if [[ -f ${indice_names_file} ]]; then
  while IFS="," read -r ind name
  do
     if [[ ${indices[@]} =~ ${ind} ]]; then
       pos=$(getPos ${ind} ${indices[@]})
       indiceNames[${pos}]=${name}
     fi
   done < "${indice_names_file}"
fi

# Get owned indices, dates & amounts Traded
buyDates=()
indicesTraded=()
amountTraded=()
tracked=()
owned_stock_file="${fileroot}/data/user_data/owned"
if [[ -f ${owned_stock_file} ]]; then
  while IFS="," read -r d indice amt
  do
    buyDates+=(${d})
    indicesTraded+=(${indice})
    amountTraded+=(${amt})
    tracked+=("0")
  done < "${owned_stock_file}"
fi

# Get last known rates
lastRate=()
for fname in ${filenames[@]}
do
  if [[ -f ${fname} ]]; then
    readarray -d "," -t strarr <<< $(tail -1 ${fname})
    lastRate+=($(echo "${strarr[1]}" | tr -d '\n'))
  else
    lastRate+=(0);
  fi
done

# Loop through all known indices
for indice in ${indices[@]}
do
  # If one of the indices looped through is known to have been Traded,
  if [[ ${indicesTraded[@]} =~ ${indice} ]]; then
    # then get its position
    indPos=$(getPos ${indice} ${indices[@]})
    # Start reading the historic data of that indice
    if [[ -f "${filenames[indPos]}" ]]; then
      while IFS="," read -r d rate
      do
        # If the current indice being checked was Traded and on the current date being cheked,
        if [[ ${indicesTraded[@]} =~ ${indice} ]] && [[ ${buyDates[@]} =~ ${d} ]]; then
          # then get the positions of this/those date(s) in the ownership arrays
          bdPoss=$(getPoss ${d} ${buyDates[@]})
          # Loop through the found dates
          for bdPos in ${bdPoss[@]}
          do
            # If the indice being checked was Traded or sold on one of the days found matching this indice,
            if [[ ${indice} == ${indicesTraded[bdPos]} ]] && [[ ${tracked[bdPos]} == "0" ]]; then
              # then get the data
              purchase=$(awk '{print $1*$2}' <<< "${amountTraded[bdPos]} ${rate}")
              totalAmountTraded[indPos]=$(awk '{print $1+$2}' <<< "${totalAmountTraded[indPos]} ${amountTraded[bdPos]}")
              if (( $(echo "$amountTraded >= 0" | bc -l) )); then
                # On amount bought
                totalPurchase[indPos]=$(awk '{print $1+$2}' <<< "${totalPurchase[indPos]} ${purchase}")
                grandTotalPurchase=$(awk '{print $1+$2}' <<< "${grandTotalPurchase} ${purchase}")
              else
                # If stocks have been sold (negative amount), calculate current average rate
                # and remove from total and grand total purchase at that rate
                currAverageRate=$(awk '{print $1/$2}' <<< "${totalPurchase[indPos]} ${totalAmountTraded[indPos]}")
                totalPurchase[indPos]=$(awk '{print $1+($2*$3}' <<< "${totalPurchase[indPos]} ${amountTraded[bdPos]} ${currAverageRate}")
                grandTotalPurchase=$(awk '{print $1+($2*$3)}' <<< "${grandTotalPurchase} ${amountTraded[bdPos]} ${currAverageRate}")
              fi
              # Used for logging
              nrOfEntries[indPos]=$((nrOfEntries[indPos] + 1))
              # Set Traded stock data as being tracked so it is not counted twice if there are
              # more than one instances of historic stock rates on the same day
              tracked[bdPos]="1"
            fi
          done
        fi
      done < "${filenames[indPos]}"
    fi
  fi
done

# Preparing to render email message
email_file="${fileroot}/email.html"
if [[ -f "${email_file}" ]]; then
  rm "${email_file}"
fi

(
echo "From: ${sender_address}";
echo "To: ${email_address}";
echo "Subject: ${email_subject}";
echo "Content-Type: text/html";
echo "MIME-Version: 1.0";
echo "";
echo "<br/>";
echo "$(cat ${email_file})";
) >> "${email_file}"

table_template_file="${fileroot}/templates/table_template"
grand_table_template_file="${fileroot}/templates/grand_table_template"
header_template_file="${fileroot}/templates/header_template"
footer_template_file="${fileroot}/templates/footer_template"

# Add email header
if [[ -f ${header_template_file} ]]; then
  cat "${header_template_file}" >> "${email_file}"
fi

# Totalling values
i=0;
while [[ ${i} < ${#indices[@]} ]]
do
  if [[ ${totalPurchase[i]} != "0" ]] && [[ ${totalAmountTraded[i]} != "0" ]]; then
    averageRate[${i}]=$(awk '{print $1/$2}' <<< "${totalPurchase[i]} ${totalAmountTraded[i]}")
  fi
  if [[ ${averageRate[i]} != "0" ]]; then
    rDiff=$(awk '{print $1-$2}' <<< "${lastRate[i]} ${averageRate[i]}")
    rateDiffPercent[${i}]=$(awk '{print ($1/$2)*100}' <<< "${rDiff} ${averageRate[i]}")
  fi
  if [[ ${totalAmountTraded[i]} != "0" ]]; then
    totalPurchaseCurrValue[${i}]=$(awk '{print $1*$2}' <<< "${totalAmountTraded[i]} ${lastRate[i]}")
    grandTotalCurrValue=$(awk '{print $1+$2}' <<< "${grandTotalCurrValue} ${totalPurchaseCurrValue[i]}")
  fi
  if [[ ${totalPurchaseCurrValue[i]} != "0" ]] && [[ ${totalPurchase[i]} != "0" ]] ; then
    totalPurchaseDiff=[${i}]=$(awk '{print $1-$2}' <<< "${totalPurchaseCurrValue} ${totalPurchase}")
  fi

  # Setting two decimal points for currency fields
  totalPurchase[i]=$(printf "%0.2f\n" $(tr "." "," <<< ${totalPurchase[i]}))
  totalPurchaseCurrValue[i]=$(printf "%0.2f\n" $(tr "." "," <<< ${totalPurchaseCurrValue[i]}))
  totalPurchaseDiff[i]=$(printf "%0.2f\n" $(tr "." "," <<< ${totalPurchaseDiff[i]}))

  # Changing currency separator
  if [[ $separator != "" ]]; then
    totalPurchase[i]=$(tr "," "${separator}" <<< ${totalPurchase[i]})
    totalPurchaseCurrValue[i]=$(tr "," "${separator}" <<< ${totalPurchaseCurrValue[i]})
    totalPurchaseDiff[i]=$(tr "," "${separator}" <<< ${totalPurchaseDiff[i]})
  fi

  # Changing currency sign
  if [[ $currency != "" ]]; then
    totalPurchase[i]="${currency} ${totalPurchase[i]}"
    totalPurchaseCurrValue[i]="${currency} ${totalPurchaseCurrValue[i]}"
    totalPurchaseDiff[i]="${currency} ${totalPurchaseDiff[i]}"
  fi

  # Adding individual stock tables to email
  if [[ -f ${table_template_file} ]]; then
    echo $(eval "echo \"$(cat ${table_template_file})\"") >> "${email_file}"
  fi

  i=$((i + 1))
done

grandTotalValueDiff=$(awk '{print ($1-$2)}' <<< "${grandTotalCurrValue} ${grandTotalPurchase}")

if [[ ${grandTotalValueDiff} != "0" ]] && [[ ${grandTotalPurchase} != "0" ]]; then
  grandTotalValueDiffPercent=$(awk '{print ($1/$2)*100}' <<< "${grandTotalValueDiff} ${grandTotalPurchase}")
fi

# Setting two decimal points for currency fields
grandTotalPurchase=$(printf "%0.2f\n" $(tr "." "," <<< ${grandTotalPurchase[i]}))
grandTotalCurrValue=$(printf "%0.2f\n" $(tr "." "," <<< ${grandTotalCurrValue[i]}))
grandTotalValueDiff=$(printf "%0.2f\n" $(tr "." "," <<< ${grandTotalValueDiff[i]}))

# Changing currency separator
if [[ $separator != "" ]]; then
  grandTotalPurchase=$(tr "," "${separator}" <<< ${grandTotalPurchase})
  grandTotalCurrValue=$(tr "," "${separator}" <<< ${grandTotalCurrValue})
  grandTotalValueDiff=$(tr "," "${separator}" <<< ${grandTotalValueDiff})
fi

# Changing currency sign
if [[ $currency != "" ]]; then
  grandTotalPurchase="${currency} ${grandTotalPurchase}"
  grandTotalCurrValue="${currency} ${grandTotalCurrValue}"
  grandTotalValueDiff="${currency} ${grandTotalValueDiff}"
fi

# Adding grand total table to email
if [[ -f ${grand_table_template_file} ]]; then
  echo $(eval "echo \"$(cat ${grand_table_template_file})\"") >> "${email_file}"
fi

# Finishing up email rendering
if [[ -f ${footer_template_file} ]]; then
  cat "${footer_template_file}" >> "${email_file}"
fi

# Log values
if [[ ${logging} == "on" ]]; then
  echo "Logging..."
  if [[ ! -d "${fileroot}/logs" ]]; then
    mkdir "${fileroot}/logs"
  fi
  (
  echo "---"
  echo "date $(date +%Y.%m.%d)"
  echo "time $(date +%HH:%MM:%SS)"
  echo "whoami $(whoami)"
  echo "email ${email_address}"
  echo "indices ${indices[@]}"
  echo "nrOfEntries ${nrOfEntries[@]}"
  echo "totalAmountTraded ${totalAmountTraded[@]}"
  echo "totalPurchase ${totalPurchase[@]}"
  echo "averageRate ${averageRate[@]}"
  echo "lastRate ${lastRate[@]}"
  echo "rateDiffPercent ${rateDiffPercent[@]}"
  echo "totalPurchaseCurrValue ${totalPurchaseCurrValue[@]}"
  echo "totalPurchaseDiff ${totalPurchaseDiff[@]}"
  echo "grandTotalPurchase ${grandTotalPurchase}"
  echo "grandTotalCurrValue ${grandTotalCurrValue}"
  echo "grandTotalValueDiff ${grandTotalValueDiff}"
  echo "grandTotalValueDiffPercent ${grandTotalValueDiffPercent}"
  ) >> ${fileroot}"/logs/mailrate.log"
fi

# Send email
echo "Sending email..."
$(/usr/sbin/ssmtp "${email_address}" < "${email_file}")

# Remove sent email render file
if [[ -f "${email_file}" ]]; then
  rm "${email_file}"
fi

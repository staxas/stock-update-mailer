#!/bin/bash

# Stock-Update-Mailer
# MailRates v0.1
# By Edwin Rietmeijer, 2020

if [[ ${1} == "" ]]; then
  echo "Usage: ${0} <email-addr> [-c <symbol>] [-d <symbol>] [-e <email-addr>] [-s <subject>] [-l <on/off>]"
  echo ""
  echo "Currency symbol (-c) is blank by default"
  echo "Decimal separator symbol (-d) is ',' by default"
  echo "Sender email address (-e) is <email-address> by default"
  echo "Email subject (-s) is 'Stock update' by default"
  echo "Logging (-l) is off by default"
  exit 0
fi

# Email address
email_address=${1}
shift
sender_address=${email_address}
email_subject="Stock update"

while getopts ":l:c:d:e:s:" opt; do
   case ${opt} in
     l )
       if [[ $OPTARG == "on" ]] || [[ $OPTARG == "off" ]]; then
         logging=$OPTARG
       else
         echo "Invalid Option: -$OPTARG , logging can only be 'on' or 'off'" 1>&2
         exit 1
       fi
       ;;
     c )
       currency=$OPTARG
       ;;
     d )
       separator=$OPTARG
       ;;
     e )
       sender_address=$OPTARG
       ;;
     s )
       email_subject=$OPTARG
       ;;
    * )
       echo "Invalid Option: -$OPTARG " 1>&2
       exit 1
       ;;
   esac
 done

# Function to get first index of an item in an array
getPos() {
  local toFind=${1}
  shift
  local i=0;
  for v in ${@}
  do
    if [[ $v == $toFind ]]; then
      echo ${i};
      return;
    fi;
  i=$((i + 1));
  done;
  echo -1;
}

# Function to get all indexes of an item in an array as an array
getPoss() {
  local toFind="${1}"
  shift
  local i=0;
  local p=();
  for v in ${@}
  do
    if [[ $v == $toFind ]]; then
      p+=(${i});
    fi;
  i=$((i + 1));
  done;
  echo ${p[@]}
}

# Project working directory
fileroot="$( cd "$(dirname "$0")" || exit >/dev/null 2>&1 ; pwd -P )"

# Prepare grand total variables
grandTotalPurchase=0
grandTotalCurrValue=0
grandTotalValueDiff=0
grandTotalValueDiffPercent=0

# Prepare arrays
files=$(find "${fileroot}"/data/rates/*)
filenames=()
stocks=()
totalAmountTraded=()
totalPurchase=()
totalPurchaseFormatted=()
nrOfEntries=()
averageRate=()
averageRateFormatted=()
rateDiffPercent=()
rateDiffPercentFormatted=()
totalPurchaseCurrValue=()
totalPurchaseCurrValueFormatted=()
totalPurchaseDiff=()
totalPurchaseDiffFormatted=()
stockNames=()
stockOrder=()
for fname in ${files}
do
  filenames+=("${fname}")
  stocks+=($(basename "${fname}"))
  totalAmountTraded+=("0")
  totalPurchase+=("0")
  totalPurchaseFormatted+=("0")
  nrOfEntries+=("0")
  averageRate+=("0")
  averageRateFormatted+=("0")
  rateDiffPercent+=("0")
  rateDiffPercentFormatted+=("0")
  totalPurchaseCurrValue+=("0")
  totalPurchaseCurrValueFormatted+=("0")
  totalPurchaseDiff+=("0")
  totalPurchaseDiffFormatted+=("0")
  stockNames+=("")
  stockOrder+=("")
done

# Get stock names
stock_names_file="${fileroot}/data/naming/names"
if [[ -f ${stock_names_file} ]]; then
  while IFS="," read -r stk order name
  do
    pos=$(getPos ${stk} ${stocks[@]})
    if [[ $pos != "-1" ]]; then
      stockNames[${pos}]=${name}
      stockOrder[${order}]=${pos}
    fi
  done < "${stock_names_file}"
else
  echo "${stock_names_file} does not exist"
  exit 1
fi

# Get traded stocks, dates & amounts Traded
buyDates=()
stocksTraded=()
amountTraded=()
tracked=()
trades_stock_file="${fileroot}/data/user_data/trades"
if [[ -f "${trades_stock_file}" ]]; then
  while IFS="," read -r d stock amt
  do
    buyDates+=(${d})
    stocksTraded+=(${stock})
    amountTraded+=(${amt})
    tracked+=("0")
  done < "${trades_stock_file}"
fi
if [[ ${#buyDates[@]} == "0" ]]; then
  echo "No traded stock data found"
fi

# Get last known rates
lastRate=()
for fname in ${filenames[@]}
do
  lastRateFormatted+=(0)
  if [[ -f "${fname}" ]]; then
    readarray -d "," -t strarr <<< $(tail -1 "${fname}")
    lastRate+=($(echo "${strarr[1]}" | tr -d '\n'))
  else
    lastRate+=(0)
  fi
done

# Loop through all known stocks
for stock in ${stocks[@]}
do
  # Try to get the position of the current stock being checked
  indPos=$(getPos ${stock} ${stocks[@]})
  if [[ ${indPos} != -1 ]]; then
  # Start reading the historic data of that stock
    if [[ -f "${filenames[indPos]}" ]]; then
      while IFS="," read -r d rate
      do
        # If the current stock being checked was traded and on the current date being cheked,
        # then try to get the positions of this/those date(s) in the ownership arrays
        bdPoss=$(getPoss ${d} ${buyDates[@]})
        # Loop through the found dates (if any)
        for bdPos in ${bdPoss[@]}
        do
          # If the stock being checked was bought or sold on one of the days found matching this stock,
          if [[ ${stock} == ${stocksTraded[bdPos]} ]] && [[ ${tracked[bdPos]} == "0" ]]; then
            # then get the data
            purchase=$(awk '{print $1*$2}' <<< "${amountTraded[bdPos]} ${rate}")
            totalAmountTraded[indPos]=$(awk '{print $1+$2}' <<< "${totalAmountTraded[indPos]} ${amountTraded[bdPos]}")
            if (( $(echo "$amountTraded >= 0" | bc -l) )); then
              # On amount bought, do this
              totalPurchase[indPos]=$(awk '{print $1+$2}' <<< "${totalPurchase[indPos]} ${purchase}")
              grandTotalPurchase=$(awk '{print $1+$2}' <<< "${grandTotalPurchase} ${purchase}")
            else
              # If stocks have been sold (negative amount), calculate current average rate
              # and remove from total and grand total purchase at that rate
              currAverageRate=$(awk '{print $1/$2}' <<< "${totalPurchase[indPos]} ${totalAmountTraded[indPos]}")
              totalPurchase[indPos]=$(awk '{print $1+($2*$3}' <<< "${totalPurchase[indPos]} ${amountTraded[bdPos]} ${currAverageRate}")
              grandTotalPurchase=$(awk '{print $1+($2*$3)}' <<< "${grandTotalPurchase} ${amountTraded[bdPos]} ${currAverageRate}")
            fi
            # Set traded stock data as having being tracked so it is not counted twice if there are
            # more than one instances of historic stock rates on the same day. This means calculations
            # are done on the first instance of a historic rate on a given date. Subsequent data is ignored.
            tracked[bdPos]="1"
            # Used for logging
            nrOfEntries[indPos]=$((nrOfEntries[indPos] + 1))
          fi
        done
      done < "${filenames[indPos]}"
    fi
  fi
done

# Preparing to render email message
email_file="${fileroot}/email.html"
if [[ -f "${email_file}" ]]; then
  rm "${email_file}"
fi

(
echo "From: ${sender_address}";
echo "To: ${email_address}";
echo "Subject: ${email_subject}";
echo "Content-Type: text/html";
echo "MIME-Version: 1.0";
echo "";
echo "$(cat ${email_file})";
) >> "${email_file}"

table_template_file="${fileroot}/templates/table_template"
grand_table_template_file="${fileroot}/templates/grand_table_template"
header_template_file="${fileroot}/templates/header_template"
footer_template_file="${fileroot}/templates/footer_template"

# Add email header
if [[ -f ${header_template_file} ]]; then
  cat "${header_template_file}" >> "${email_file}"
fi

# Totalling values and rendering tables to email
locDec=$(locale decimal_point)
for i in ${stockOrder[@]}
do
  if [[ ${totalPurchase[i]} != "0" ]] && [[ ${totalAmountTraded[i]} != "0" ]]; then
    averageRate[i]=$(awk '{print $1/$2}' <<< "${totalPurchase[i]} ${totalAmountTraded[i]}")
  fi
  if [[ ${averageRate[i]} != "0" ]]; then
    rDiff=$(awk '{print $1-$2}' <<< "${lastRate[i]} ${averageRate[i]}")
    rateDiffPercent[i]=$(awk '{print ($1/$2)*100}' <<< "${rDiff} ${averageRate[i]}")
  fi
  if [[ ${totalAmountTraded[i]} != "0" ]]; then
    totalPurchaseCurrValue[i]=$(awk '{print $1*$2}' <<< "${totalAmountTraded[i]} ${lastRate[i]}")
    grandTotalCurrValue=$(awk '{print $1+$2}' <<< "${grandTotalCurrValue} ${totalPurchaseCurrValue[i]}")
  fi
  if [[ ${totalPurchaseCurrValue[i]} != "0" ]] && [[ ${totalPurchase[i]} != "0" ]] ; then
    totalPurchaseDiff[i]=$(awk '{print $1-$2}' <<< "${totalPurchaseCurrValue[i]} ${totalPurchase[i]}")
  fi

  # Setting three decimal points for percentage fields
  rateDiffPercentFormatted[i]=$(printf "%0.3f\n" ${rateDiffPercent[i]/./${locDec}})
  rateDiffPercentFormatted[i]=${rateDiffPercentFormatted[i]/${locDec}/.}

  # Setting two decimal points for currency fields
  totalPurchaseFormatted[i]=$(printf "%0.2f\n" ${totalPurchase[i]/./${locDec}})
  totalPurchaseCurrValueFormatted[i]=$(printf "%0.2f\n"  ${totalPurchaseCurrValue[i]/./${locDec}})
  totalPurchaseDiffFormatted[i]=$(printf "%0.2f\n"  ${totalPurchaseDiff[i]/./${locDec}})
  averageRateFormatted[i]=$(printf "%0.2f\n" ${averageRate[i]/./${locDec}})
  lastRateFormatted[i]=$(printf "%0.2f\n" ${lastRate[i]/./${locDec}})

  # Changing currency separator
  if [[ $separator != "" ]]; then
    totalPurchaseFormatted[i]=${totalPurchaseFormatted[i]/${locDec}/${separator}}
    totalPurchaseCurrValueFormatted[i]=${totalPurchaseCurrValueFormatted[i]/${locDec}/${separator}}
    totalPurchaseDiffFormatted[i]=${totalPurchaseDiffFormatted[i]/${locDec}/${separator}}
    averageRateFormatted[i]=${averageRateFormatted[i]/${locDec}/${separator}}
    lastRateFormatted[i]=${lastRateFormatted[i]/${locDec}/${separator}}
  fi

  # Adding currency sign
  if [[ $currency != "" ]]; then
    totalPurchaseFormatted[i]="${currency} ${totalPurchaseFormatted[i]}"
    totalPurchaseCurrValueFormatted[i]="${currency} ${totalPurchaseCurrValueFormatted[i]}"
    totalPurchaseDiffFormatted[i]="${currency} ${totalPurchaseDiffFormatted[i]}"
    averageRateFormatted[i]="${currency} ${averageRateFormatted[i]}"
    lastRateFormatted[i]="${currency} ${lastRateFormatted[i]}"
  fi

  # Adding individual stock tables to email
  if [[ -f ${table_template_file} ]]; then
    echo $(eval "echo \"$(cat ${table_template_file})\"") >> "${email_file}"
  fi
done

grandTotalValueDiff=$(awk '{print ($1-$2)}' <<< "${grandTotalCurrValue} ${grandTotalPurchase}")

if [[ ${grandTotalValueDiff} != "0" ]] && [[ ${grandTotalPurchase} != "0" ]]; then
  grandTotalValueDiffPercent=$(awk '{print ($1/$2)*100}' <<< "${grandTotalValueDiff} ${grandTotalPurchase}")
fi

# Setting three decimal points for percentage fields
grandTotalValueDiffPercentFormatted=$(printf "%0.3f\n" ${grandTotalValueDiffPercent/./${locDec}})
grandTotalValueDiffPercentFormatted=${grandTotalValueDiffPercentFormatted/${locDec}/.}

# Setting two decimal points for currency fields
grandTotalPurchaseFormatted=$(printf "%0.2f\n" ${grandTotalPurchase/./${locDec}})
grandTotalCurrValueFormatted=$(printf "%0.2f\n" ${grandTotalCurrValue/./${locDec}})
grandTotalValueDiffFormatted=$(printf "%0.2f\n" ${grandTotalValueDiff/./${locDec}})

# Changing currency separator
if [[ $separator != "" ]]; then
  grandTotalPurchaseFormatted=${grandTotalPurchaseFormatted/${locDec}/${separator}}
  grandTotalCurrValueFormatted=${grandTotalCurrValueFormatted/${locDec}/${separator}}
  grandTotalValueDiffFormatted=${grandTotalValueDiffFormatted/${locDec}/${separator}}
fi

# Adding currency sign
if [[ $currency != "" ]]; then
  grandTotalPurchaseFormatted="${currency} ${grandTotalPurchaseFormatted}"
  grandTotalCurrValueFormatted="${currency} ${grandTotalCurrValueFormatted}"
  grandTotalValueDiffFormatted="${currency} ${grandTotalValueDiffFormatted}"
fi

# Adding grand total table to email
if [[ -f ${grand_table_template_file} ]]; then
  echo $(eval "echo \"$(cat ${grand_table_template_file})\"") >> "${email_file}"
fi

# Finishing up email rendering
if [[ -f ${footer_template_file} ]]; then
  cat "${footer_template_file}" >> "${email_file}"
fi

# Log values
if [[ ${logging} == "on" ]]; then
  echo "Logging..."
  if [[ ! -d "${fileroot}/logs" ]]; then
    mkdir "${fileroot}/logs"
  fi
  (
  echo "---"
  echo "date $(date +%Y.%m.%d)"
  echo "time $(date +%HH:%MM:%SS)"
  echo "stocks ${stocks[@]}"
  echo "nrOfEntries ${nrOfEntries[@]}"
  echo "totalAmountTraded ${totalAmountTraded[@]}"
  echo "totalPurchase ${totalPurchase[@]}"
  echo "averageRate ${averageRate[@]}"
  echo "lastRate ${lastRate[@]}"
  echo "rateDiffPercent ${rateDiffPercent[@]}"
  echo "totalPurchaseCurrValue ${totalPurchaseCurrValue[@]}"
  echo "totalPurchaseDiff ${totalPurchaseDiff[@]}"
  echo "grandTotalPurchase ${grandTotalPurchase}"
  echo "grandTotalCurrValue ${grandTotalCurrValue}"
  echo "grandTotalValueDiff ${grandTotalValueDiff}"
  echo "grandTotalValueDiffPercent ${grandTotalValueDiffPercent}"
  ) >> ${fileroot}"/logs/mailrate.log"
fi

# Send email
echo "Sending email..."
$(/usr/sbin/ssmtp "${email_address}" < "${email_file}")

# Remove sent email render file
if [[ -f "${email_file}" ]]; then
  rm "${email_file}"
fi
